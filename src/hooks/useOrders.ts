import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import type { CartItem } from '@/types/models';

interface OrderData {
  phone: string;
  email?: string;
  customerName?: string;
  address?: string;
  items: CartItem[];
  totals: {
    subtotal: number;
    shipping: number;
    tax: number;
    total: number;
  };
}

export function useOrders() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  async function createOrder(orderData: OrderData) {
    try {
      setLoading(true);
      setError(null);

      // Create order (code will be auto-generated by trigger)
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert({
          code: '', // Will be auto-generated
          phone: orderData.phone,
          email: orderData.email,
          customer_name: orderData.customerName,
          address: orderData.address,
          subtotal: orderData.totals.subtotal,
          shipping: orderData.totals.shipping,
          tax: orderData.totals.tax,
          total: orderData.totals.total,
        })
        .select()
        .single();

      if (orderError) throw orderError;

      // Create order items
      const orderItems = orderData.items.map(item => ({
        order_id: order.id,
        product_id: item.productId,
        product_name: item.productId, // This should be fetched from products table
        variant_selections: item.variantSelections || {},
        quantity: item.qty,
        unit_price: item.unitPrice,
        total_price: item.unitPrice * item.qty,
      }));

      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(orderItems);

      if (itemsError) throw itemsError;

      return { success: true, orderCode: order.code };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  }

  async function getOrderByCode(code: string) {
    try {
      setLoading(true);
      setError(null);

      const { data: order, error: orderError } = await supabase
        .from('orders')
        .select(`
          *,
          order_items (
            id,
            product_name,
            variant_selections,
            quantity,
            unit_price,
            total_price
          )
        `)
        .eq('code', code)
        .single();

      if (orderError) throw orderError;

      return { success: true, order };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Order not found';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  }

  return { createOrder, getOrderByCode, loading, error };
}